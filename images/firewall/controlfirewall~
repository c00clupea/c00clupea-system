#!/bin/sh

DIR_BASE=`pwd $`
DIR_RUN=${DIR_BASE}/run
FILE_PID=${DIR_RUN}/pid
FILE_MONITOR=${DIR_RUN}/monitor

FILE_CONF=${DIR_BASE}/config

if [ ! -f config ]
then
    echo "no config file"
    exit 1
fi

. ${FILE_CONF}

# function copied from http://www.linux-kvm.org/page/Simple_shell_script_to_manage_your_virtual_machine_with_bridged_networking 
get_vm_pid_to() {
    ACTION_TO_DO=$1
    # check if pid file there
    if [ ! -f ${FILE_PID} ]
    then
	echo "${FILE_PID} not found, can not ${ACTION_TO_DO}"
	exit 1
    fi
    VM_PID=`cat ${FILE_PID}`
}

#end from copy


get_status(){
    get_vm_pid_to "status"
    if [ -d /proc/${VM_PID} ]
    then
	echo "Machine up and running"
	return 0
    else
	echo "Machine down"
	return 1
    fi
    
    }

send_command(){
    MONITOR_COMMAND=$1
    echo "${MONITOR_COMMAND}" | socat - UNIX-CONNECT:${FILE_MONITOR}
    }

stop_vm(){
    get_vm_pid_to "stop vm"
    if [ ! -e ${FILE_MONITOR} ]
    then
	echo "No monitor...exit"
	exit 1
    fi

    if [ -d /proc/${VM_PID} ]
    then
	send_command "quit"
    fi
    if [ -d /proc/${VM_PID} ]
    then
	sleep 1
    fi
    if [ -d /proc/${VM_PID} ]
    then
	echo "can not stop VM..."
	exit 1
    else
	rm ${FILE_PID}
	rm ${FILE_MONITOR}
	echo "I stopped VM..."
    fi
    sh controlnetwork stop
    echo "Network stopped"
    
    }

kill_vm(){
    get_vm_pid_to "kill"
    if [ -d /proc/${VM_PID} ]
    then
	kill ${VM_PID}
	echo "killed VM"
    else
	echo "nothing to kill"
	exit 1
    fi
    sleep 1
    sh controlnetwork stop
    }


start_vm(){

    if [ -f ${FILE_PID} ]
    then
	echo "System already running"
	exit 1
    fi
    
    
    
    sh controlnetwork start
    sudo modprobe kvm
    sudo modprobe kvm_amd
    kvm -hda ${C_HDA_FILE} \
	-m ${C_MEMORY} \
	-net tap,ifname=${C_TAPIF},script=no,vlan=1 \
	-net nic,macaddr=${C_MAC},model=virtio,vlan=1 \
	-nographic \
	-pidfile ${FILE_PID} \
	-monitor unix:${FILE_MONITOR},server,nowait \
	-cpu ${C_CPU} \
	-vnc :${C_VNC_DISPLAY} \
	-k ${C_KEY} \
	${C_ADD} &

    if [ ! -f ${FILE_PID} ]
    then
	sleep 1
    fi
    if [ ! -f ${FILE_PID} ]
    then
	return 1
    fi
    if [ ! -d  /proc/`cat ${FILE_PID}` ]
    then
	return 1
    fi
 }


start_mode(){
    start_vm
    if test $? -eq -1
    then
	echo "startup failed"
	exit 1
    else
	echo "startup success"
    fi
    }

case "$1" in
    start-vm)
	start_mode
	;;
    stop-vm)
	stop_vm
	;;
    kill-vm)
	kill_vm
	;;
    *)
	echo "start-vm"
	echo "stop-vm"
	echo "kill-vm"
	exit 1
	;;
    
esac
exit
